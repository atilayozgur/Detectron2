------------Labelme to coco format dönüşüm-----------------------

# import package
import labelme2coco

# set directory that contains labelme annotations and image files
labelme_folder = "cow/train"

# set path for coco json to be saved
save_json_path = "cow/train/train_coco.json"

# convert labelme annotations to coco
labelme2coco.convert(labelme_folder, save_json_path)

#yeni dosya üzerinde değiştirme yap file path üzerinde
# import package
import labelme2coco

# set directory that contains labelme annotations and image files
labelme_folder = "cow/val"

# set path for coco json to be saved
save_json_path = "cow/val/val_coco.json"

# convert labelme annotations to coco
labelme2coco.convert(labelme_folder, save_json_path)

---------------Detectron------------------

#dosya yükleme format cow/train ve cow/val şeklinde
!unzip cow.zip

# if your dataset is in COCO format, this cell can be replaced by the following three lines:
from detectron2.data.datasets import register_coco_instances
register_coco_instances("cow_train", {}, "./cow/train/train_coco.json", "./cow/train")
register_coco_instances("cow_val", {}, "./cow/val/val_coco.json", "./cow/val")

#dictionary create train için
cow_metadata = MetadataCatalog.get("cow_train")
print(cow_metadata)
dataset_dicts = DatasetCatalog.get("cow_train")
print(dataset_dicts)

#train veri setinden örnekler
for d in random.sample(dataset_dicts, 10):
    img = cv2.imread(d["file_name"])
    visualizer = Visualizer(img[:, :, ::-1], metadata=cow_metadata, scale=0.5)
    out = visualizer.draw_dataset_dict(d)
    cv2_imshow(out.get_image()[:, :, ::-1])

#training
from detectron2.engine import DefaultTrainer

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("cow_train",)
cfg.DATASETS.TEST = ()
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")  # Let training initialize from model zoo
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.00025  # pick a good LR
cfg.SOLVER.MAX_ITER = 300    # 300 iterations seems good enough for this toy dataset; you will need to train longer for a practical dataset
cfg.SOLVER.STEPS = []        # do not decay learning rate
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128   # faster, and good enough for this toy dataset (default: 512)
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1  # only has one class (ballon). (see https://detectron2.readthedocs.io/tutorials/datasets.html#update-the-config-for-new-datasets)
# NOTE: this config means the number of classes, but a few popular unofficial tutorials incorrect uses num_classes+1 here.

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg) 
trainer.resume_or_load(resume=False)
trainer.train()

#Inference & evaluation using the trained model
# Inference should use the config with parameters that are used in training
# cfg now already contains everything we've set previously. We changed it a little bit for inference:
cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")  # path to the model we just trained
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7   # set a custom testing threshold
predictor = DefaultPredictor(cfg)

#dictionary create val için
dataset_dicts = DatasetCatalog.get("cow_val")
print(dataset_dicts)

#validation veri setinden predictionlar
from detectron2.utils.visualizer import ColorMode

for d in random.sample(dataset_dicts, 10):    
    im = cv2.imread(d["file_name"])
    outputs = predictor(im)  # format is documented at https://detectron2.readthedocs.io/tutorials/models.html#model-output-format
    v = Visualizer(im[:, :, ::-1],
                   metadata=cow_metadata, 
                   scale=0.5, 
                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels. This option is only available for segmentation models
    )
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    cv2_imshow(out.get_image()[:, :, ::-1])

#Model başarısını ölçmek için
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
evaluator = COCOEvaluator("cow_val", ("bbox", "segm"), False, output_dir="./output/")
val_loader = build_detection_test_loader(cfg, "cow_val")
print(inference_on_dataset(trainer.model, val_loader, evaluator))

